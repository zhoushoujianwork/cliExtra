#!/bin/bash

# cliExtra 工具管理脚本

# 加载公共函数
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/cliExtra-common.sh"

# 显示帮助
show_help() {
    echo "用法: cliExtra tools <command> [options]"
    echo ""
    echo "命令:"
    echo "  list                     列出所有可用工具"
    echo "  add <tool_name>          添加工具软链接到当前项目（自动覆盖已存在的）"
    echo "  remove <tool_name>       从当前项目移除工具"
    echo "  show <tool_name>         显示工具详细信息"
    echo "  installed                显示当前项目已安装的工具"
    echo "  check-links              检查工具软链接状态"
    echo "  repair-links             修复损坏的工具软链接"
    echo "  convert-to-links         将普通文件转换为软链接"
    echo ""
    echo "选项:"
    echo "  --project <path>         指定项目路径（默认当前目录）"
    echo "  -o, --output <format>    输出格式：table（默认）或 json"
    echo "  -f, --force              强制覆盖（add命令默认行为）"
    echo ""
    echo "示例:"
    echo "  cliExtra tools list                    # 列出所有可用工具"
    echo "  cliExtra tools list -o json            # 以JSON格式列出工具"
    echo "  cliExtra tools add git                 # 创建git工具软链接到当前项目"
    echo "  cliExtra tools add dingtalk            # 创建钉钉工具软链接到当前项目"
    echo "  cliExtra tools remove git              # 从当前项目移除git工具"
    echo "  cliExtra tools check-links             # 检查当前项目的工具软链接状态"
    echo "  cliExtra tools repair-links            # 修复损坏的软链接"
    echo "  cliExtra tools convert-to-links        # 将普通文件转换为软链接"
    echo "  cliExtra tools show git                # 显示git工具详细信息"
    echo "  cliExtra tools installed               # 显示当前项目已安装的工具"
}

# 获取tools源目录
get_tools_source_dir() {
    echo "$CLIEXTRA_TOOLS_SOURCE_DIR"
}

# 获取项目目录
get_project_dir() {
    local project_path="${1:-$(pwd)}"
    
    # 转换为绝对路径
    if [[ "$project_path" = /* ]]; then
        echo "$project_path"
    else
        echo "$(pwd)/$project_path"
    fi
}

# 获取项目的tools目录
get_project_tools_dir() {
    local project_dir="$1"
    echo "$project_dir/$CLIEXTRA_PROJECT_CONFIG_DIR/$CLIEXTRA_PROJECT_RULES_DIR"
}

# 列出所有可用工具
list_available_tools() {
    local output_format="$1"
    local tools_source_dir=$(get_tools_source_dir)
    
    if [[ ! -d "$tools_source_dir" ]]; then
        if [[ "$output_format" == "json" ]]; then
            echo '{"tools": [], "count": 0}'
        else
            echo "错误: tools源目录不存在: $tools_source_dir"
        fi
        return 1
    fi
    
    if [[ "$output_format" == "json" ]]; then
        echo "{"
        echo "  \"tools\": ["
        local first=true
        for tool_file in "$tools_source_dir"/*.md; do
            if [[ -f "$tool_file" ]]; then
                local tool_name=$(basename "$tool_file" .md)
                local description=$(head -n 1 "$tool_file" | sed 's/^# //')
                
                if [[ "$first" == true ]]; then
                    first=false
                else
                    echo ","
                fi
                echo -n "    {\"name\": \"$tool_name\", \"description\": \"$description\"}"
            fi
        done
        echo ""
        echo "  ],"
        local count=$(find "$tools_source_dir" -name "*.md" -type f | wc -l | tr -d ' ')
        echo "  \"count\": $count"
        echo "}"
    else
        echo "=== 可用工具 ==="
        printf "%-15s %s\n" "工具名称" "描述"
        printf "%-15s %s\n" "--------" "----"
        
        for tool_file in "$tools_source_dir"/*.md; do
            if [[ -f "$tool_file" ]]; then
                local tool_name=$(basename "$tool_file" .md)
                local description=$(head -n 1 "$tool_file" | sed 's/^# //')
                printf "%-15s %s\n" "$tool_name" "$description"
            fi
        done
    fi
}

# 显示工具详细信息
show_tool_info() {
    local tool_name="$1"
    local tools_source_dir=$(get_tools_source_dir)
    local tool_file="$tools_source_dir/$tool_name.md"
    
    if [[ ! -f "$tool_file" ]]; then
        echo "错误: 工具 '$tool_name' 不存在"
        return 1
    fi
    
    echo "=== 工具详情: $tool_name ==="
    cat "$tool_file"
}

# 添加工具到项目
add_tool_to_project() {
    local tool_name="$1"
    local project_dir="$2"
    local tools_source_dir=$(get_tools_source_dir)
    local project_tools_dir=$(get_project_tools_dir "$project_dir")
    
    # 检查工具是否存在
    local source_tool_file="$tools_source_dir/$tool_name.md"
    if [[ ! -f "$source_tool_file" ]]; then
        echo "错误: 工具 '$tool_name' 不存在"
        echo "使用 'cliExtra tools list' 查看可用工具"
        return 1
    fi
    
    # 创建项目tools目录
    mkdir -p "$project_tools_dir"
    
    # 目标软链接文件
    local target_tool_link="$project_tools_dir/tools_$tool_name.md"
    
    # 如果已存在，先删除（可能是旧的复制文件或损坏的链接）
    if [[ -e "$target_tool_link" || -L "$target_tool_link" ]]; then
        echo "  移除已存在的文件/链接: $target_tool_link"
        rm -f "$target_tool_link"
    fi
    
    # 创建软链接
    if ln -s "$source_tool_file" "$target_tool_link"; then
        echo "✓ 工具 '$tool_name' 软链接已创建"
        echo "  链接位置: $target_tool_link"
        echo "  指向文件: $source_tool_file"
        
        # 记录安装信息
        local install_log="$project_dir/.cliExtra/tools_installed.log"
        mkdir -p "$(dirname "$install_log")"
        echo "$(date): 创建工具软链接 $tool_name -> $source_tool_file" >> "$install_log"
        
        return 0
    else
        echo "✗ 工具 '$tool_name' 软链接创建失败"
        return 1
    fi
}

# 从项目移除工具
remove_tool_from_project() {
    local tool_name="$1"
    local project_dir="$2"
    local project_tools_dir=$(get_project_tools_dir "$project_dir")
    local target_tool_file="$project_tools_dir/tools_$tool_name.md"
    
    # 检查工具是否已安装
    if [[ ! -f "$target_tool_file" ]]; then
        echo "工具 '$tool_name' 未安装在当前项目中"
        return 1
    fi
    
    # 删除工具文件
    if rm -f "$target_tool_file"; then
        echo "✓ 工具 '$tool_name' 已从项目中移除"
        
        # 记录卸载信息
        local install_log="$project_dir/.cliExtra/tools_installed.log"
        mkdir -p "$(dirname "$install_log")"
        echo "$(date): 卸载工具 $tool_name" >> "$install_log"
    else
        echo "✗ 工具 '$tool_name' 移除失败"
        return 1
    fi
}

# 显示项目已安装的工具
show_installed_tools() {
    local project_dir="$1"
    local project_tools_dir=$(get_project_tools_dir "$project_dir")
    
    if [[ ! -d "$project_tools_dir" ]]; then
        echo "当前项目未安装任何工具"
        return 0
    fi
    
    echo "=== 已安装工具 (项目: $project_dir) ==="
    printf "%-15s %s\n" "工具名称" "描述"
    printf "%-15s %s\n" "--------" "----"
    
    local found_tools=false
    for tool_file in "$project_tools_dir"/tools_*.md; do
        if [[ -f "$tool_file" ]]; then
            found_tools=true
            local tool_name=$(basename "$tool_file" | sed 's/^tools_//' | sed 's/\.md$//')
            local description=$(head -n 1 "$tool_file" | sed 's/^# //')
            printf "%-15s %s\n" "$tool_name" "$description"
        fi
    done
    
    if [[ "$found_tools" == false ]]; then
        echo "当前项目未安装任何工具"
    fi
}

# 解析参数
PROJECT_DIR=""
COMMAND=""
TOOL_NAME=""
OUTPUT_FORMAT="table"

while [[ $# -gt 0 ]]; do
    case $1 in
        --project)
            PROJECT_DIR="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_FORMAT="$2"
            shift 2
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        list|add|remove|show|installed)
            COMMAND="$1"
            if [[ "$1" == "add" || "$1" == "remove" || "$1" == "show" ]]; then
                TOOL_NAME="$2"
                shift 2
            else
                shift
            fi
            ;;
        *)
            if [[ -z "$COMMAND" ]]; then
                COMMAND="$1"
                shift
            elif [[ -z "$TOOL_NAME" && ("$COMMAND" == "add" || "$COMMAND" == "remove" || "$COMMAND" == "show") ]]; then
                TOOL_NAME="$1"
                shift
            else
                echo "未知参数: $1"
                show_help
                exit 1
            fi
            ;;
    esac
done

# 设置默认项目目录
if [[ -z "$PROJECT_DIR" ]]; then
    PROJECT_DIR=$(get_project_dir)
fi

# 主逻辑
case "$COMMAND" in
    "list")
        list_available_tools "$OUTPUT_FORMAT"
        ;;
    "add")
        if [[ -z "$TOOL_NAME" ]]; then
            echo "错误: 请指定要添加的工具名称"
            show_help
            exit 1
        fi
        add_tool_to_project "$TOOL_NAME" "$PROJECT_DIR"
        ;;
    "remove")
        if [[ -z "$TOOL_NAME" ]]; then
            echo "错误: 请指定要移除的工具名称"
            show_help
            exit 1
        fi
        remove_tool_from_project "$TOOL_NAME" "$PROJECT_DIR"
        ;;
    "show")
        if [[ -z "$TOOL_NAME" ]]; then
            echo "错误: 请指定要查看的工具名称"
            show_help
            exit 1
        fi
        show_tool_info "$TOOL_NAME"
        ;;
    "installed")
        show_installed_tools "$PROJECT_DIR"
        ;;
    "check-links")
        check_tool_links "$PROJECT_DIR"
        ;;
    "repair-links")
        repair_tool_links "$PROJECT_DIR"
        ;;
    "convert-to-links")
        convert_to_links "$PROJECT_DIR"
        ;;
    "")
        show_help
        ;;
    *)
        echo "未知命令: $COMMAND"
        show_help
        exit 1
        ;;
esac

# 检查工具软链接状态
check_tool_links() {
    local project_dir="$1"
    local project_tools_dir=$(get_project_tools_dir "$project_dir")
    
    echo "检查工具软链接状态..."
    echo "项目目录: $project_dir"
    echo "工具目录: $project_tools_dir"
    
    if [[ ! -d "$project_tools_dir" ]]; then
        echo "项目中未安装任何工具"
        return 0
    fi
    
    local total_links=0
    local valid_links=0
    local broken_links=0
    local regular_files=0
    
    for tool_file in "$project_tools_dir"/tools_*.md; do
        if [[ -e "$tool_file" || -L "$tool_file" ]]; then
            local filename=$(basename "$tool_file")
            local tool_name=${filename#tools_}
            tool_name=${tool_name%.md}
            
            ((total_links++))
            
            if [[ -L "$tool_file" ]]; then
                if [[ -e "$tool_file" ]]; then
                    local target=$(readlink "$tool_file")
                    echo "  ✓ $tool_name -> 软链接正常 ($target)"
                    ((valid_links++))
                else
                    echo "  ✗ $tool_name -> 软链接已损坏"
                    ((broken_links++))
                fi
            else
                echo "  ⚠ $tool_name -> 普通文件（建议转换为软链接）"
                ((regular_files++))
            fi
        fi
    done
    
    echo ""
    echo "检查结果:"
    echo "  总计: $total_links 个工具"
    echo "  正常软链接: $valid_links 个"
    echo "  损坏软链接: $broken_links 个"
    echo "  普通文件: $regular_files 个"
    
    if [[ $broken_links -gt 0 || $regular_files -gt 0 ]]; then
        echo ""
        echo "建议操作:"
        [[ $broken_links -gt 0 ]] && echo "  使用 'qq tools repair-links' 修复损坏的软链接"
        [[ $regular_files -gt 0 ]] && echo "  使用 'qq tools convert-to-links' 将普通文件转换为软链接"
    fi
    
    return $broken_links
}

# 修复损坏的工具软链接
repair_tool_links() {
    local project_dir="$1"
    local project_tools_dir=$(get_project_tools_dir "$project_dir")
    local tools_source_dir=$(get_tools_source_dir)
    
    echo "修复工具软链接..."
    
    if [[ ! -d "$project_tools_dir" ]]; then
        echo "项目中未安装任何工具"
        return 0
    fi
    
    local repaired_count=0
    local failed_count=0
    
    for tool_file in "$project_tools_dir"/tools_*.md; do
        if [[ -L "$tool_file" && ! -e "$tool_file" ]]; then
            local filename=$(basename "$tool_file")
            local tool_name=${filename#tools_}
            tool_name=${tool_name%.md}
            
            local source_tool_file="$tools_source_dir/$tool_name.md"
            
            if [[ -f "$source_tool_file" ]]; then
                echo "  修复 $tool_name..."
                rm -f "$tool_file"
                if ln -s "$source_tool_file" "$tool_file"; then
                    echo "  ✓ $tool_name 修复成功"
                    ((repaired_count++))
                else
                    echo "  ✗ $tool_name 修复失败"
                    ((failed_count++))
                fi
            else
                echo "  ⚠ $tool_name 源文件不存在，跳过修复"
                ((failed_count++))
            fi
        fi
    done
    
    echo ""
    echo "修复结果: $repaired_count 个成功, $failed_count 个失败"
    return $failed_count
}

# 将普通文件转换为软链接
convert_to_links() {
    local project_dir="$1"
    local project_tools_dir=$(get_project_tools_dir "$project_dir")
    local tools_source_dir=$(get_tools_source_dir)
    
    echo "转换普通文件为软链接..."
    
    if [[ ! -d "$project_tools_dir" ]]; then
        echo "项目中未安装任何工具"
        return 0
    fi
    
    local converted_count=0
    local failed_count=0
    
    for tool_file in "$project_tools_dir"/tools_*.md; do
        if [[ -f "$tool_file" && ! -L "$tool_file" ]]; then
            local filename=$(basename "$tool_file")
            local tool_name=${filename#tools_}
            tool_name=${tool_name%.md}
            
            local source_tool_file="$tools_source_dir/$tool_name.md"
            
            if [[ -f "$source_tool_file" ]]; then
                echo "  转换 $tool_name..."
                
                # 备份原文件
                local backup_file="$tool_file.backup.$(date +%s)"
                mv "$tool_file" "$backup_file"
                
                # 创建软链接
                if ln -s "$source_tool_file" "$tool_file"; then
                    echo "  ✓ $tool_name 转换成功"
                    rm -f "$backup_file"  # 删除备份
                    ((converted_count++))
                else
                    echo "  ✗ $tool_name 转换失败，恢复原文件"
                    mv "$backup_file" "$tool_file"
                    ((failed_count++))
                fi
            else
                echo "  ⚠ $tool_name 源文件不存在，跳过转换"
                ((failed_count++))
            fi
        fi
    done
    
    echo ""
    echo "转换结果: $converted_count 个成功, $failed_count 个失败"
    return $failed_count
}
